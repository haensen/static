body {
    background: repeating-linear-gradient(45deg, #faf9ff 0, #faf9ff 10%, transparent 0, transparent 50%);
    background-size: 3em 3em;
    background-color: #ffffff;
    opacity: 1
}

body > h1 {
    text-align: center;
    margin: 1em 0;
}

.trick-container {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-evenly;
    /* align-content: space-around; */
    /* align-items: center; */
    gap: 1em;
}

h1,h2 {
    font-family: "Nanum Gothic Coding", monospace;
    font-weight: 400;
    font-style: normal;
}

.trick {
    background-color: lightblue;
    border-radius: 5px;
    padding: 10px;
    max-width: calc(100% - 20px - 1em);
}

.cube-container {
    --cube-size: 20vmin;
    margin: calc(var(--cube-size)*0.5) 0;
    position: relative;
    height: calc(var(--cube-size));
    width: 0;
    left: 50%;
}
.cube {
    perspective: 500px;
    transform-style: preserve-3d;
    backface-visibility: visible;
}
@keyframes rotation {
    0% {
        transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) var(--initial-rotation);
    }
    10% {
        transform: rotateX(30deg) rotateY(-10deg) rotateZ(100deg) var(--initial-rotation);
    }
    40% {
        transform: rotateX(-300deg) rotateY(-200deg) rotateZ(-500deg) var(--initial-rotation);
    }
    80% {
        transform: rotateX(-150deg) rotateY(-250deg) rotateZ(-500deg) var(--initial-rotation);
    }
    100% {
        transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) var(--initial-rotation);
    }
}
.face {
    display: block;
    position: absolute;
    left: calc(var(--cube-size)*(-0.5));
    width: var(--cube-size);
    height: var(--cube-size);
    border: none;
    line-height: var(--cube-size);
    font-family: sans-serif;
    font-size: 60px;
    color: white;
    text-align: center;
    animation: rotation 7s ease 0s infinite;
}
.front {
    background: rgb(0 0 0 / 90%);
    --initial-rotation: translateZ(calc(var(--cube-size)/2));
}
.back {
    background: rgb(0 255 0 / 90%);
    --initial-rotation: rotateY(180deg) translateZ(calc(var(--cube-size)/2));
}
.cube .right {
    background: rgb(196 0 0 / 90%);
    --initial-rotation: rotateY(90deg) translateZ(calc(var(--cube-size)/2));
}
.cube .left {
    /* background: rgb(0 0 196 / 90%); */
    background-image: url("goose.jpg");
    background-size: cover;
    --initial-rotation: rotateY(-90deg) translateZ(calc(var(--cube-size)/2));
}
.top {
    background: rgb(196 196 0 / 90%);
    --initial-rotation: rotateX(90deg) translateZ(calc(var(--cube-size)/2));
}
.bottom {
    background: rgb(196 0 196 / 90%);
    --initial-rotation: rotateX(-90deg) translateZ(calc(var(--cube-size)/2));
}

.trick:has(.clip-img) {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
.clip-img {
    background-image: url("goose.jpg");
    background-size: cover;
    background-position: center;
    width: 50vmin;
    height: 50vmin;
    clip-path: polygon(
        20% 0%,
        0% 20%,
        30% 50%,
        0% 80%,
        20% 100%,
        50% 70%,
        80% 100%,
        100% 80%,
        70% 50%,
        100% 20%,
        80% 0%,
        50% 30%
    );
}

code.code {
    display: block;
    background-color: black;
    color: white;
    counter-reset: code-line 0;
    overflow: hidden;
    max-width: 100%;

    /* Nested CSS should work nowadays in vanilla */
    p::before {
        content: counter(code-line) ": ";
        counter-increment: code-line;
        width: 2em;
        display: inline-block;
    }
    p {
        margin: 0 0 0 5px;
        white-space: pre;
    }
}

.contain-container {
    container-name: test;
    container-type: size;
    width: 60vw;
    height: 20em;
    display: flex;
    justify-content:space-between;
    background-color: beige;
    padding: 10px;

    .left.code {
        background-color: blue;
        width: 30cqw;
    }
    .right.code {
        width: 60cqw;
        background-color: gray;
    }
}